{"version":3,"sources":["app.tsx","report-web-vitals.ts","index.tsx"],"names":["unityContext","UnityContext","productName","companyName","loaderUrl","dataUrl","frameworkUrl","codeUrl","streamingAssetsUrl","webglContextAttributes","preserveDrawingBuffer","App","useState","isUnityMounted","setIsUnityMounted","rotationSpeed","setRotationSpeed","cubeRotation","setCubeRotation","x","y","clickPosition","setClickPosition","saidMessage","setSaidMessage","isLoaded","setIsLoaded","progression","setProgression","handleOnUnityCanvas","canvas","setAttribute","handleOnUnityProgress","handleOnUnityLoaded","handleOnUnityRotationDidUpdate","degrees","Math","round","handleOnUnityClickedPosition","handleOnUnitySayMessage","message","useEffect","on","removeAllEventListeners","send","className","onClick","style","width","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootElement","document","getElementById","render","console","log"],"mappings":"kPAUMA,EAAe,IAAIC,eAAa,CACpCC,YAAa,0BACbC,YAAa,kBAGbC,UAAW,yCACXC,QAAS,oCACTC,aAAc,4CACdC,QAAS,oCACTC,mBAAoB,oCAEpBC,uBAAwB,CACtBC,uBAAuB,KA2IZC,MAtIf,WAEE,MAA4CC,oBAAkB,GAA9D,mBAAOC,EAAP,KAAuBC,EAAvB,KACA,EAA0CF,mBAAiB,IAA3D,mBAAOG,EAAP,KAAsBC,EAAtB,KACA,EAAwCJ,mBAAiB,GAAzD,mBAAOK,EAAP,KAAqBC,EAArB,KACA,EAA0CN,mBAAkB,CAAEO,EAAG,EAAGC,EAAG,IAAvE,mBAAOC,EAAP,KAAsBC,EAAtB,KACA,EAAsCV,mBAAiB,WAAvD,mBAAOW,EAAP,KAAoBC,EAApB,KACA,EAAgCZ,oBAAkB,GAAlD,mBAAOa,EAAP,KAAiBC,EAAjB,KACA,EAAsCd,mBAAiB,GAAvD,mBAAOe,EAAP,KAAoBC,EAApB,KAsBA,SAASC,EAAoBC,GAC3BA,EAAOC,aAAa,OAAQ,eAI9B,SAASC,EAAsBL,GAC7BC,EAAeD,GAIjB,SAASM,IACPP,GAAY,GAKd,SAASQ,EAA+BC,GACtCjB,EAAgBkB,KAAKC,MAAMF,IAK7B,SAASG,EAA6BnB,EAAWC,GAC/CE,EAAiB,CAAEH,IAAGC,MAKxB,SAASmB,EAAwBC,GAC/BhB,EAAegB,GAuBjB,OAvEAC,qBAAU,WAQR,OAPAzC,EAAa0C,GAAG,SAAUb,GAC1B7B,EAAa0C,GAAG,WAAYV,GAC5BhC,EAAa0C,GAAG,SAAUT,GAC1BjC,EAAa0C,GAAG,oBAAqBR,GACrClC,EAAa0C,GAAG,kBAAmBJ,GACnCtC,EAAa0C,GAAG,MAAOH,GAEhB,WACLvC,EAAa2C,6BAEd,IAGHF,qBAAU,WACRzC,EAAa4C,KAAK,YAAa,mBAAoB7B,KAClD,CAACA,IAwDF,cAAC,WAAD,UACE,sBAAK8B,UAAU,UAAf,UAEE,yDACA,uPAOA,wBAAQC,QApBd,YACmB,IAAbrB,GACFC,GAAY,GAEdZ,GAAqC,IAAnBD,IAgBd,6BACA,wBAAQiC,QAhCd,WACE9B,EAAiBD,EAAgB,KA+B7B,4BACA,wBAAQ+B,QA5Bd,WACE9B,EAAiBD,EAAgB,KA2B7B,6BAEoB,IAAnBF,GACC,eAAC,WAAD,WACE,sBAAKgC,UAAU,kBAAf,WAEgB,IAAbpB,GACC,qBAAKoB,UAAU,kBAAf,SACE,qBAAKA,UAAU,eAAf,SACE,qBACEA,UAAU,oBACVE,MAAO,CAAEC,MAAqB,IAAdrB,EAAoB,WAM5C,cAAC,IAAD,CAAOkB,UAAU,eAAe7C,aAAcA,OAGhD,qDACsB,4BAAIiB,IAD1B,WAEE,uBAFF,sBAGqB,kCAAKM,EAAL,OAHrB,IAIE,uBAJF,cAKa,kCAAKF,EAAcF,KALhC,KAKwC,kCAAKE,EAAcD,WAI/D,mDACoB,IAClB,mBAAG6B,KAAK,oCAAR,sCCrIKC,EAlBS,SAAUC,GAC5BA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAMtB,IALFC,EAKC,EALDA,OACAC,EAIC,EAJDA,OACAC,EAGC,EAHDA,OACAC,EAEC,EAFDA,OACAC,EACC,EADDA,QAEAJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCVRQ,G,MAAcC,SAASC,eAAe,SAG5CC,iBACE,cAAC,aAAD,UACE,cAAC,EAAD,MAEFH,GAIFT,EAAgBa,QAAQC,O","file":"static/js/main.6881d64e.chunk.js","sourcesContent":["import \"./app.css\";\nimport { Fragment, useEffect, useState } from \"react\";\nimport Unity, { UnityContext } from \"react-unity-webgl\";\n\ninterface Vector2 {\n  x: number;\n  y: number;\n}\n\n// This is the context that Unity will use to communicate with the React app.\nconst unityContext = new UnityContext({\n  productName: \"React Unity WebGL Tests\",\n  companyName: \"Jeffrey Lanters\",\n  // The url's of the Unity WebGL runtime, these paths are public and should be\n  // accessible from the internet and relative to the index.html.\n  loaderUrl: \"unitybuild/2020.1/myunityapp.loader.js\",\n  dataUrl: \"unitybuild/2020.1/myunityapp.data\",\n  frameworkUrl: \"unitybuild/2020.1/myunityapp.framework.js\",\n  codeUrl: \"unitybuild/2020.1/myunityapp.wasm\",\n  streamingAssetsUrl: \"unitybuild/2020.1/streamingassets\",\n  // Additional configuration options.\n  webglContextAttributes: {\n    preserveDrawingBuffer: true,\n  },\n});\n\n// This is the React component that will be rendering the Unity app.\nfunction App() {\n  // The app's state.\n  const [isUnityMounted, setIsUnityMounted] = useState<boolean>(true);\n  const [rotationSpeed, setRotationSpeed] = useState<number>(30);\n  const [cubeRotation, setCubeRotation] = useState<number>(0);\n  const [clickPosition, setClickPosition] = useState<Vector2>({ x: 0, y: 0 });\n  const [saidMessage, setSaidMessage] = useState<string>(\"Nothing\");\n  const [isLoaded, setIsLoaded] = useState<boolean>(false);\n  const [progression, setProgression] = useState<number>(0);\n\n  // When the component is mounted, we'll register some event listener.\n  useEffect(() => {\n    unityContext.on(\"canvas\", handleOnUnityCanvas);\n    unityContext.on(\"progress\", handleOnUnityProgress);\n    unityContext.on(\"loaded\", handleOnUnityLoaded);\n    unityContext.on(\"RotationDidUpdate\", handleOnUnityRotationDidUpdate);\n    unityContext.on(\"ClickedPosition\", handleOnUnityClickedPosition);\n    unityContext.on(\"Say\", handleOnUnitySayMessage);\n    // When the component is unmounted, we'll unregister the event listener.\n    return function () {\n      unityContext.removeAllEventListeners();\n    };\n  }, []);\n\n  // When the rotation speed has been updated, it will be sent to Unity.\n  useEffect(() => {\n    unityContext.send(\"MeshCrate\", \"SetRotationSpeed\", rotationSpeed);\n  }, [rotationSpeed]);\n\n  // Built-in event invoked when the Unity canvas is ready to be interacted with.\n  function handleOnUnityCanvas(canvas: HTMLCanvasElement) {\n    canvas.setAttribute(\"role\", \"unityCanvas\");\n  }\n\n  // Built-in event invoked when the Unity app's progress has changed.\n  function handleOnUnityProgress(progression: number) {\n    setProgression(progression);\n  }\n\n  // Built-in event invoked when the Unity app is loaded.\n  function handleOnUnityLoaded() {\n    setIsLoaded(true);\n  }\n\n  // Custom event invoked when the Unity app sends a message indicating that the\n  // rotation has changed.\n  function handleOnUnityRotationDidUpdate(degrees: number) {\n    setCubeRotation(Math.round(degrees));\n  }\n\n  // Custom event invoked when the Unity app sends a message indicating that the\n  // mouse click position has changed.\n  function handleOnUnityClickedPosition(x: number, y: number) {\n    setClickPosition({ x, y });\n  }\n\n  // Custom event invoked when the Unity app sends a message including something\n  // it said.\n  function handleOnUnitySayMessage(message: string) {\n    setSaidMessage(message);\n  }\n\n  // Event invoked when the user clicks the button, the speed will be increased.\n  function handleOnClickIncreaseSpeed() {\n    setRotationSpeed(rotationSpeed + 15);\n  }\n\n  // Event invoked when the user clicks the button, the speed will be decreased.\n  function handleOnClickDecreaseSpeed() {\n    setRotationSpeed(rotationSpeed - 15);\n  }\n\n  // Event invoked when the user clicks the button, the unity container will be\n  // mounted or unmounted depending on the current mounting state.\n  function handleOnClickUnMountUnity() {\n    if (isLoaded === true) {\n      setIsLoaded(false);\n    }\n    setIsUnityMounted(isUnityMounted === false);\n  }\n\n  // This is the React component that will be rendering the Unity app.\n  return (\n    <Fragment>\n      <div className=\"wrapper\">\n        {/* Introduction text */}\n        <h1>React Unity WebGL Tests</h1>\n        <p>\n          In this React Application we'll explore the possibilities with the\n          React Unity WebGL Module. Use the built-in events, custom events,\n          mount, unmount, press the buttons and resize the view to see the magic\n          in action.\n        </p>\n        {/* Some buttons to interact */}\n        <button onClick={handleOnClickUnMountUnity}>(Un)mount Unity</button>\n        <button onClick={handleOnClickIncreaseSpeed}>Increase speed</button>\n        <button onClick={handleOnClickDecreaseSpeed}>Decrease speed</button>\n        {/* The Unity container */}\n        {isUnityMounted === true && (\n          <Fragment>\n            <div className=\"unity-container\">\n              {/* The loading screen will be displayed here. */}\n              {isLoaded === false && (\n                <div className=\"loading-overlay\">\n                  <div className=\"progress-bar\">\n                    <div\n                      className=\"progress-bar-fill\"\n                      style={{ width: progression * 100 + \"%\" }}\n                    />\n                  </div>\n                </div>\n              )}\n              {/* The Unity app will be rendered here. */}\n              <Unity className=\"unity-canvas\" unityContext={unityContext} />\n            </div>\n            {/* Displaying some output values */}\n            <p>\n              The cube is rotated <b>{cubeRotation}</b> degrees\n              <br />\n              The Unity app said <b>\"{saidMessage}\"</b>!\n              <br />\n              Clicked at <b>x{clickPosition.x}</b>, <b>y{clickPosition.y}</b>\n            </p>\n          </Fragment>\n        )}\n        <h6>\n          Made with love by{\" \"}\n          <a href=\"https://github.com/jeffreylanters\">Jeffrey Lanters</a>\n        </h6>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\n// report web vitals\nconst reportWebVitals = function (onPerfEntry?: ReportHandler) {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(function ({\n      getCLS,\n      getFID,\n      getFCP,\n      getLCP,\n      getTTFB,\n    }) {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { StrictMode } from \"react\";\nimport { render } from \"react-dom\";\nimport App from \"./app\";\nimport reportWebVitals from \"./report-web-vitals\";\nimport \"./index.css\";\n\nconst rootElement = document.getElementById(\"root\");\n\n// renders the app onto the document\nrender(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n\n// enable measuring performance of the app onto the console\nreportWebVitals(console.log);\n"],"sourceRoot":""}